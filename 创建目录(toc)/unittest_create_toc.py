#!/bin/env python3
# -*- coding: utf-8 -*-
# version: Python3.X
""" 用来测试 create_toc 是否实现正确
"""
import unittest

from create_toc import create_toc, get_title, get_toc_items

__author__ = '__L1n__w@tch'


class TestCreateToc(unittest.TestCase):
    def setUp(self):
        """
        设置测试数据
        :return:
        """
        self.final_toc = ["- [题目 1: just print a+b](#题目-1-just-print-ab)",
                          '- [题目 2: list排序](#题目-2-list排序)',
                          '- [题目 3: 字符串逆序](#题目-3-字符串逆序)',
                          '- [题目 4: 输出字典 key](#题目-4-输出字典-key)',
                          '- [题目 5: 输出字符奇数位置的字符串](#题目-5-输出字符奇数位置的字符串)',
                          '- [题目 6: 求解100以内的所有素数](#题目-6-求解100以内的所有素数)',
                          '- [题目 7: 求矩形面积](#题目-7-求矩形面积)',
                          '- [题目 8: 求中位数](#题目-8-求中位数)',
                          '- [题目 9: 最大公约数](#题目-9-最大公约数)',
                          '- [题目 10: 最小公倍数](#题目-10-最小公倍数)',
                          '- [题目 11: 结尾0的个数](#题目-11-结尾0的个数)',
                          '- [题目 12: 结尾非零数的奇偶性](#题目-12-结尾非零数的奇偶性)',
                          '- [题目 13: 光棍的悲伤](#题目-13-光棍的悲伤)',
                          '- [题目 14: Python之美](#题目-14-python之美)',
                          '- [题目 15: 大小写转换](#题目-15-大小写转换)',
                          '- [题目 16: 人民币金额打印](#题目-16-人民币金额打印)',
                          '- [题目 17: 公约数的个数](#题目-17-公约数的个数)',
                          '- [题目 18: 逆解最大公约数与最小公倍数](#题目-18-逆解最大公约数与最小公倍数)',
                          '- [题目 19: 单身情歌](#题目-19-单身情歌)',
                          '- [题目 20: 信息加密](#题目-20-信息加密)',
                          '- [题目 21: 回文子串](#题目-21-回文子串)',
                          '- [题目 22: 时间就是金钱](#题目-22-时间就是金钱)',
                          '- [题目 23: 365 Or 366？](#题目-23-365-or-366)',
                          '- [题目 25: 格式化时间](#题目-25-格式化时间)',
                          '- [题目 26: 序列判断](#题目-26-序列判断)',
                          '- [题目 27: 加油站](#题目-27-加油站)',
                          '- [题目 28: 相同数字](#题目-28-相同数字)',
                          '- [题目 29: 判断三角形](#题目-29-判断三角形)',
                          '- [题目 30: National Day](#题目-30-national-day)',
                          '- [题目 31: 山峰的个数](#题目-31-山峰的个数)',
                          '- [题目 32: 三角形形状](#题目-32-三角形形状)',
                          '- [题目 33: 大幂次运算](#题目-33-大幂次运算)',
                          '- [题目 35: 最大连续子序列](#题目-35-最大连续子序列)',
                          '- [题目 36: 最大非连续子序列](#题目-36-最大非连续子序列)',
                          '- [题目 37: 简单题之勾股定理](#题目-37-简单题之勾股定理)',
                          '- [题目 38: 简单题之列表转换](#题目-38-简单题之列表转换)',
                          '- [题目 39: 简单题之输出格式练习](#题目-39-简单题之输出格式练习)',
                          '- [题目 40: 整数解](#题目-40-整数解)',
                          '- [题目 41: Py数](#题目-41-py数)']
        self.final_title = ['## 题目 1: just print a+b', '## 题目 2: list排序', '## 题目 3: 字符串逆序', '## 题目 4: 输出字典 key',
                            '## 题目 5: 输出字符奇数位置的字符串', '## 题目 6: 求解100以内的所有素数', '## 题目 7: 求矩形面积', '## 题目 8: 求中位数',
                            '## 题目 9: 最大公约数', '## 题目 10: 最小公倍数', '## 题目 11: 结尾0的个数', '## 题目 12: 结尾非零数的奇偶性',
                            '## 题目 13: 光棍的悲伤', '## 题目 14: Python之美', '## 题目 15: 大小写转换', '## 题目 16: 人民币金额打印',
                            '## 题目 17: 公约数的个数', '## 题目 18: 逆解最大公约数与最小公倍数', '## 题目 19: 单身情歌',
                            '## 题目 20: 信息加密', '## 题目 21: 回文子串', '## 题目 22: 时间就是金钱', '## 题目 23: 365 Or 366？',
                            '## 题目 25: 格式化时间', '## 题目 26: 序列判断', '## 题目 27: 加油站', '## 题目 28: 相同数字', '## 题目 29: 判断三角形',
                            '## 题目 30: National Day', '## 题目 31: 山峰的个数', '## 题目 32: 三角形形状', '## 题目 33: 大幂次运算',
                            '## 题目 35: 最大连续子序列', '## 题目 36: 最大非连续子序列', '## 题目 37: 简单题之勾股定理', '## 题目 38: 简单题之列表转换',
                            '## 题目 39: 简单题之输出格式练习', '## 题目 40: 整数解', '## 题目 41: Py数']
        self.final_toc_items = [("题目 1: just print a+b", "#题目-1-just-print-ab"),
                                ("题目 2: list排序", "#题目-2-list排序"),
                                ("题目 3: 字符串逆序", "#题目-3-字符串逆序"),
                                ("题目 4: 输出字典 key", "#题目-4-输出字典-key"),
                                ("题目 5: 输出字符奇数位置的字符串", "#题目-5-输出字符奇数位置的字符串"),
                                ("题目 6: 求解100以内的所有素数", "#题目-6-求解100以内的所有素数"),
                                ("题目 7: 求矩形面积", "#题目-7-求矩形面积"),
                                ("题目 8: 求中位数", "#题目-8-求中位数"),
                                ("题目 9: 最大公约数", "#题目-9-最大公约数"),
                                ("题目 10: 最小公倍数", "#题目-10-最小公倍数"),
                                ("题目 11: 结尾0的个数", "#题目-11-结尾0的个数"),
                                ("题目 12: 结尾非零数的奇偶性", "#题目-12-结尾非零数的奇偶性"),
                                ("题目 13: 光棍的悲伤", "#题目-13-光棍的悲伤"),
                                ("题目 14: Python之美", "#题目-14-python之美"),
                                ("题目 15: 大小写转换", "#题目-15-大小写转换"),
                                ("题目 16: 人民币金额打印", "#题目-16-人民币金额打印"),
                                ("题目 17: 公约数的个数", "#题目-17-公约数的个数"),
                                ("题目 18: 逆解最大公约数与最小公倍数", "#题目-18-逆解最大公约数与最小公倍数"),
                                ("题目 19: 单身情歌", "#题目-19-单身情歌"),
                                ("题目 20: 信息加密", "#题目-20-信息加密"),
                                ("题目 21: 回文子串", "#题目-21-回文子串"),
                                ("题目 22: 时间就是金钱", "#题目-22-时间就是金钱"),
                                ("题目 23: 365 Or 366？", "#题目-23-365-or-366"),
                                ("题目 25: 格式化时间", "#题目-25-格式化时间"),
                                ("题目 26: 序列判断", "#题目-26-序列判断"),
                                ("题目 27: 加油站", "#题目-27-加油站"),
                                ("题目 28: 相同数字", "#题目-28-相同数字"),
                                ("题目 29: 判断三角形", "#题目-29-判断三角形"),
                                ("题目 30: National Day", "#题目-30-national-day"),
                                ("题目 31: 山峰的个数", "#题目-31-山峰的个数"),
                                ("题目 32: 三角形形状", "#题目-32-三角形形状"),
                                ("题目 33: 大幂次运算", "#题目-33-大幂次运算"),
                                ("题目 35: 最大连续子序列", "#题目-35-最大连续子序列"),
                                ("题目 36: 最大非连续子序列", "#题目-36-最大非连续子序列"),
                                ("题目 37: 简单题之勾股定理", "#题目-37-简单题之勾股定理"),
                                ("题目 38: 简单题之列表转换", "#题目-38-简单题之列表转换"),
                                ("题目 39: 简单题之输出格式练习", "#题目-39-简单题之输出格式练习"),
                                ("题目 40: 整数解", "#题目-40-整数解"),
                                ("题目 41: Py数", "#题目-41-py数")]

    def test_toc(self):
        """
        测试生成的 toc 是否正常
        :return: None
        """
        input_file_name = "test_readme.md"
        output_file_name = "test.txt"
        create_toc(input_file_name, output_file_name, ("##",))

        with open(output_file_name, "r") as f:
            for each_line in f:
                self.failIf(each_line.strip() != self.final_toc.pop(0))

    def test_get_toc_items(self):
        """
        测试从标题中获取得到的各个 toc 项是否合法
        :return: None
        """
        answer = get_toc_items(self.final_title)
        self.failUnless(get_toc_items(self.final_title) == self.final_toc_items)

    def test_get_title(self):
        """
        测试获取的 title 项是否正常
        :return: None
        """
        with open("test_readme.md", "r") as f:
            data = f.readlines()

        self.failUnless(get_title(data, ("##",)) == self.final_title)


if __name__ == "__main__":
    # 指定测试顺序
    suite = unittest.TestSuite()
    suite.addTest(TestCreateToc("test_get_title"))
    suite.addTest(TestCreateToc("test_get_toc_items"))
    suite.addTest(TestCreateToc("test_toc"))
    runner = unittest.TextTestRunner()
    runner.run(suite)
